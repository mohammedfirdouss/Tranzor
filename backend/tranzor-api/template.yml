AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: tranzor-api

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs18.x
    MemorySize: 256
    Tracing: Active

Resources:
  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Transactions
      AttributeDefinitions:
        - AttributeName: transactionId
          AttributeType: S
      KeySchema:
        - AttributeName: transactionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  TransactionProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TransactionProcessingQueue

  TransactionProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TransactionProcessor
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: src/transaction_processor/
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt TransactionProcessingQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable
      Events:
        SQSTransactionProcessing:
          Type: SQS
          Properties:
            Queue: !GetAtt TransactionProcessingQueue.Arn
            BatchSize: 1

  ProcessTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProcessTransaction
      Handler: index.handler
      CodeUri: src/process_transaction/
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
          TRANSACTION_QUEUE_URL: !Ref TransactionProcessingQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt TransactionProcessingQueue.QueueName
      Events:
        ApiTransactionPost:
          Type: Api
          Properties:
            Path: /v1/transactions
            Method: post

  GetTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetTransaction
      Handler: index.handler
      Runtime: nodejs22.x
      CodeUri: src/get_transaction/
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TransactionsTable
      Events:
        ApiGetTransaction:
          Type: Api
          Properties:
            Path: /v1/transactions/{transactionId}
            Method: get

  ListAccountTransactionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListAccountTransactions
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: src/list_account_transactions/
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TransactionsTable
      Events:
        ApiListAccountTransactions:
          Type: Api
          Properties:
            Path: /v1/accounts/{accountId}/transactions
            Method: get

Outputs:
  TransactionsTableName:
    Description: Name of the Transactions DynamoDB table
    Value: !Ref TransactionsTable
  ProcessTransactionFunctionArn:
    Description: ARN of the ProcessTransaction Lambda function
    Value: !GetAtt ProcessTransactionFunction.Arn
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Stage/v1/transactions"
  TransactionProcessingQueueUrl:
    Description: URL of the Transaction Processing SQS queue
    Value: !Ref TransactionProcessingQueue
  TransactionProcessorFunctionArn:
    Description: ARN of the TransactionProcessor Lambda function
    Value: !GetAtt TransactionProcessorFunction.Arn