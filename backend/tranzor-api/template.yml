AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: tranzor-api

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs18.x
    MemorySize: 256
    Tracing: Active

Resources:
  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Transactions
      AttributeDefinitions:
        - AttributeName: transactionId
          AttributeType: S
        - AttributeName: accountId
          AttributeType: S
        - AttributeName: receivedTimestamp
          AttributeType: S
      KeySchema:
        - AttributeName: transactionId
          KeyType: HASH
        - AttributeName: accountId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: AccountId-ReceivedTimestamp-index
          KeySchema:
            - AttributeName: accountId
              KeyType: HASH
            - AttributeName: receivedTimestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
  
  TransactionProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TransactionProcessingQueue

  TransactionProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TransactionProcessor
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: src/transaction_processor/
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME:
            Ref: TransactionsTable
      Policies:
        - SQSPollerPolicy:
            QueueName: !Ref TransactionProcessingQueue
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable
      Events:
        SQSTransactionProcessing:
          Type: SQS
          Properties:
            Queue: !GetAtt [TransactionProcessingQueue, Arn]
            BatchSize: 1

  ProcessTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProcessTransaction
      Handler: index.handler
      CodeUri: src/process_transaction/
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
          TRANSACTION_QUEUE_URL: !Ref TransactionProcessingQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TransactionsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt TransactionProcessingQueue.QueueName
      Events:
        ApiTransactionPost:
          Type: Api
          Properties:
            Path: /v1/transactions
            Method: post
            RestApiId: !Ref ApiGateway
            Cors:
              AllowOrigin: "'*'"
              AllowHeaders: "'Content-Type,Authorization'"
              AllowMethods: "'OPTIONS,POST'"

  GetTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetTransaction
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: src/get_transaction/
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TransactionsTable
      Events:
        ApiGetTransaction:
          Type: Api
          Properties:
            Path: /v1/transactions/{transactionId}
            Method: get
            RestApiId: !Ref ApiGateway
            Cors:
              AllowOrigin: "'*'"
              AllowHeaders: "'Content-Type,Authorization'"
              AllowMethods: "'OPTIONS,GET'"

  ListAccountTransactionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListAccountTransactions
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: src/list_account_transactions/
      Environment:
        Variables:
          TRANSACTIONS_TABLE_NAME: !Ref TransactionsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TransactionsTable
      Events:
        ApiListAccountTransactions:
          Type: Api
          Properties:
            Path: /v1/accounts/{accountId}/transactions
            Method: get
            RestApiId: !Ref ApiGateway
            Cors:
              AllowOrigin: "'*'"
              AllowHeaders: "'Content-Type,Authorization'"
              AllowMethods: "'OPTIONS,GET'"

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Register
      Handler: register.handler
      Runtime: nodejs18.x
      CodeUri: src/auth/
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:SignUp
              Resource: '*'
      Events:
        ApiRegister:
          Type: Api
          Properties:
            Path: /auth/register
            Method: post
            RestApiId: !Ref ApiGateway
            Cors:
              AllowOrigin: "'*'"
              AllowHeaders: "'Content-Type,Authorization'"
              AllowMethods: "'OPTIONS,POST'"

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Login
      Handler: login.handler
      Runtime: nodejs18.x
      CodeUri: src/auth/
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
              Resource: '*'
      Events:
        ApiLogin:
          Type: Api
          Properties:
            Path: /auth/login
            Method: post
            RestApiId: !Ref ApiGateway
            Cors:
              AllowOrigin: "'*'"
              AllowHeaders: "'Content-Type,Authorization'"
              AllowMethods: "'OPTIONS,POST'"

  MeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Me
      Handler: me.handler
      Runtime: nodejs18.x
      CodeUri: src/auth/
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
              Resource: '*'
      Events:
        ApiMe:
          Type: Api
          Properties:
            Path: /auth/me
            Method: get
            RestApiId: !Ref ApiGateway
            Cors:
              AllowOrigin: "'*'"
              AllowHeaders: "'Content-Type,Authorization'"
              AllowMethods: "'OPTIONS,GET'"

  ConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Confirm
      Handler: confirm.handler
      Runtime: nodejs18.x
      CodeUri: src/auth/
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ConfirmSignUp
              Resource: '*'
      Events:
        ApiConfirm:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: post
            RestApiId: !Ref ApiGateway
            Cors:
              AllowOrigin: "'*'"
              AllowHeaders: "'Content-Type,Authorization'"
              AllowMethods: "'OPTIONS,POST'"

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TranzorUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: TranzorFrontendClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
      SupportedIdentityProviders:
        - COGNITO

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowMethods: "'OPTIONS,GET,POST'"

Outputs:
  TransactionsTableName:
    Description: Name of the Transactions DynamoDB table
    Value: !Ref TransactionsTable
  ProcessTransactionFunctionArn:
    Description: ARN of the ProcessTransaction Lambda function
    Value: !GetAtt ProcessTransactionFunction.Arn
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/v1"
  TransactionProcessingQueueUrl:
    Description: URL of the Transaction Processing SQS queue
    Value: !Ref TransactionProcessingQueue
  TransactionProcessorFunctionArn:
    Description: ARN of the TransactionProcessor Lambda function
    Value: !GetAtt TransactionProcessorFunction.Arn 

  GetTransactionFunctionArn:
    Description: ARN of the GetTransaction Lambda function
    Value: !GetAtt GetTransactionFunction.Arn      

  ListAccountTransactionsFunctionArn:
    Description: ARN of the ListAccountTransactions Lambda function
    Value: !GetAtt ListAccountTransactionsFunction.Arn

  RegisterFunctionArn:
    Description: ARN of the Register Lambda function
    Value: !GetAtt RegisterFunction.Arn

  LoginFunctionArn:
    Description: ARN of the Login Lambda function
    Value: !GetAtt LoginFunction.Arn

  MeFunctionArn:
    Description: ARN of the Me Lambda function
    Value: !GetAtt MeFunction.Arn

  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: Cognito User Pool App Client ID
    Value: !Ref CognitoUserPoolClient
